package mil.nga.bundler.messages;

import java.io.Serializable;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import mil.nga.bundler.interfaces.BundlerConstantsI;
import mil.nga.bundler.interfaces.JobTrackerI;
import mil.nga.bundler.model.Archive;
import mil.nga.bundler.types.JobStateType;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;

/**
 * JPA entity following the Java bean pattern that holds information on the
 * status of in-progress jobs.  Also includes JAX-B annotations for conversion 
 * to XML/JSON.
 * 
 * Had some problems deploying this application to JBoss.  Though the Jersey
 * annotations (Xml*) should have been sufficient, JBoss would not 
 * interpret the input as JSON.  We added the the Jackson annotations to work
 * around the issue.
 * 
 * Ran into even more problems deploying to Wildfly.  Had to upgrade to Jackson
 * 2.x annotations (i.e. com.fasterxml vs. org.codehaus).  We also had to remove
 * the Jersey (i.e. XML) annotations.  Further, we had to add the Jackson 
 * JsonIgnore annotation to all of the "getter" methods or else we ended up 
 * with two copies of the data in the output message.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class JobTrackerMessage
        implements JobTrackerI, Serializable {

    /**
     * Eclipse-generated serialVersionUID
     */
    private static final long serialVersionUID = -5071138637154858714L;
    
    /**
     * The total number of archives that will be created for this job.
     */
    @JsonProperty(value="threads")
    private int numArchives = 0;
    
    /**
     * The total number of files that have been compressed.
     */
    @JsonProperty(value="threads_complete")
    private int numArchivesComplete = 0;
    
    /**
     * Amount of time utilized by the job.
     */
    @JsonProperty(value="elapsed_time")
    private long elapsedTime = 0L;
    
    /**
     * The total number of files that have been compressed.
     */
    @JsonProperty(value="hashes_complete")
    private int numHashesComplete = 0;
    
    /**
     * The total number of files requested by the client.
     */
    @JsonProperty(value="num_files")
    private long numFiles = 0;
    
    /**
     * The total number of files that have been compressed.
     */
    @JsonProperty(value="files_complete")
    private long numFilesComplete = 0;
    
    /**
     * The total uncompressed size of the files requested.
     */
    @JsonProperty(value="size")
    private long totalSize = 0L;
    
    /**
     * The total size of the files that have been compressed.
     */
    @JsonProperty(value="size_complete")
    private long totalSizeComplete = 0L;
    
    /**
     * The list of archives generated by the bundling operation.
     */
    @JsonProperty(value="archives")
    private List<Archive> archives = new ArrayList<Archive>();
    
    /**
     * The job ID (i.e. primary key) that this tracker object is associated 
     * with.
     */
    @JsonProperty(value="job_id")
    private String jobID = null;
    
    /**
     * The state of the current job.
     */
    @JsonProperty(value="state")
    private JobStateType state = JobStateType.NOT_STARTED;
    
    /**
     * The user who submitted the job
     */
    @JsonProperty(value="user_name")
    private String userName = null;
    
    /**
     * Public no-arg constructor required for JAX-B
     */
    public JobTrackerMessage() { 
        super();
    }
    
    /**
     * Alternate constructor allowing clients to set some internal members
     * on construction.
     * 
     * @param jobID The job ID.
     * @param numFiles The number of files to be processed by this job.
     * @param totalSize The total size of all files to be processed.
     * @param numArchives The number of individual archives that will be 
     * created by this job.
     */
    public JobTrackerMessage(
            String jobID,
            int numFiles,
            long totalSize,
            int numArchives) {
        
        super();
        setJobID(jobID);
        setNumFiles(numFiles);
        setTotalSize(totalSize);
        setNumArchives(numArchives);
    }
    
    /**
     * Alternate constructor allowing clients to set some internal members
     * on construction.  This one includes a user name.
     * 
     * @param jobID The job ID.
     * @param userName The user name of the client submitting the job.
     * @param numFiles The number of files to be processed by this job.
     * @param totalSize The total size of all files to be processed.
     * @param numArchives The number of individual archives that will be 
     * created by this job.
     */
    public JobTrackerMessage(
            String jobID,
            String userName,
            long numFiles,
            long totalSize,
            int numArchives) {
        
        super();
        setJobID(jobID);
        setUserName(userName);
        setNumFiles(numFiles);
        setTotalSize(totalSize);
        setNumArchives(numArchives);
    }
    
    /**
     * Method called as archive jobs complete.  This saves a list of 
     * completed archive files.  In the new cloud deployment this method
     * is responsible for updating all of the internal pointers in order
     * to keep the the job tracker data in check.
     * 
     * @param bundle Metadata associated with a completed archive file.
     */
    public synchronized void addArchive(Archive bundle) {
        if (bundle == null) {
            archives = new ArrayList<Archive>();
        }
        archives.add(bundle);
    }
        
    /**
     * Getter method for the list of archives created by the archive job.
     * @return The list of bundles created.
     */
    public Collection<Archive> getArchives() {
        return archives;
    }
    
    /**
     * Get the elapsed time for the archive job. 
     * @return The elapsed time (in milliseconds)
     */
    @JsonIgnore
    public long getElapsedTime() {
        return elapsedTime;
    }
    
    /**
     * Getter method for the job ID associated with these metrics.
     * @return The job ID.
     */
    @JsonIgnore
    public String getJobID() {
        return jobID;
    }

    /**
     * The user who submitted the job
     * @return The user
     */
    @JsonIgnore
    public String getUserName() {
        return userName;
    }
    
    /**
     * Getter method for the number of archive files to be created by the 
     * job.
     * @return The number of archive files to create.
     */
    @JsonIgnore
    public int getNumArchives() {
        return numArchives;
    }
    
    /**
     * Getter method for the number of archive files that have been completed.
     * @return The number of archive files to create.
     */
    @JsonIgnore
    public int getNumArchivesComplete() {
        return numArchivesComplete;
    }
    
    /**
     * Getter method for the number of hash files that have been created.
     * @return The number of hash files created.
     */
    @JsonIgnore
    public int getNumHashesComplete() {
        return numHashesComplete;
    }
    
    /**
     * Getter method for the total number of files to be processed by the job.
     * @return The total number of files to be processed.
     */
    @JsonIgnore
    public long getNumFiles() {
        return numFiles;
    }
    
    /**
     * Getter method for the number of files processed.
     * @return The number of files processed.
     */
    @JsonIgnore
    public long getNumFilesComplete() {
        return numFilesComplete;
    }
    
    /**
     * Getter method for the total uncompressed size of the job.
     * @return The total uncompressed size of the job.
     */
    @JsonIgnore
    public long getTotalSize() {
        return totalSize;
    }
    
    /**
     * Getter method for the total size that has been processed by the job
     * @return The amount of data that has been processed.
     */
    @JsonIgnore
    public long getSizeComplete() {
        return totalSizeComplete;
    }
    
    /**
     * Getter method for the current state of the job in progress.
     * @return The current state of the job.
     */
    @JsonIgnore
    public JobStateType getState() {
        return state;
    }
    
    /**
     * Setter method for the amount of wall-clock time consumed by the job.
     * @param time elapsed time in milliseconds.
     */
    public void setElapsedTime(long time) {
        elapsedTime = time;
    }
    
    /**
     * Setter method for the ID associated with the job.
     * @param ID The associated job ID
     */
    public void setJobID(String ID) {
        jobID = ID;
    }

    /**
     * Setter method for the number of archive files that will be created by 
     * the current job.
     * @param value The number of archive files to create.
     */
    public void setNumArchives(int value) {
        numArchives = value;
    }
    
    /**
     * Setter method for the number of archive files that have completed 
     * processing.
     * @param value The number of archive files complete.
     */
    public void setNumArchivesComplete(int value) {
        numArchivesComplete = value;
    }
    
    /**
     * Setter method for the total number of files this job is expected to 
     * process.
     * @param size The total number of files to be processed by the job.
     */
    public void setNumFiles(long files) {
        numFiles = files;
    }
    
    /**
     * Setter method for the total number of files this job is expected to 
     * process.
     * @param size The total number of files to be processed by the job.
     */
    public void setNumFilesComplete(long files) {
        numFilesComplete = files;
    }
    
    /**
     * Setter method for the number of hash files that have been created.
     * @param value number of hash files created.
     */
    public void setNumHashesComplete(int value) {
        numHashesComplete = value;
    }
    
    /**
     * Setter method for the current state of the job.
     * @param state The state of the job
     */
    public void setState(JobStateType state) {
        this.state = state;
    }
    
    /**
     * Setter method for the size of the data completed.
     * @param value The amount of data processed.
     */
    public void setSizeComplete(long value) {
        totalSizeComplete = value;
    }
    
    /**
     * Setter method for the total amount of uncompressed data this job is 
     * expected to process.
     * @param size The total size of the job.
     */
    public void setTotalSize(long size) {
        totalSize = size;
    }

    /**
     * Setter method for the username who submitted the job
     * @param value the user name
     */
    public void setUserName(String value) {
        userName = value;
    }
    
    /**
     * Overridden toString method used to output relevant statistics data in
     * plain text.
     */
    @Override
    public String toString() {
        String        newLine = System.getProperty("line.separator");
        StringBuilder sb      = new StringBuilder();
        sb.append("----------------------------------------");
        sb.append("----------------------------------------");
        sb.append(newLine);
        sb.append("Job Tracker (ID: ");
        sb.append(getJobID());
        sb.append(")");
        sb.append(newLine);
        sb.append("----------------------------------------");
        sb.append("----------------------------------------");
        sb.append(newLine);
        sb.append("User                           : ");
        sb.append(getUserName());
        sb.append(newLine);
        sb.append("Job State                      : ");
        sb.append(getState());
        sb.append(newLine);
        sb.append("Number of Archives             : ");
        sb.append(getNumArchives());
        sb.append(newLine);
        sb.append("Number of Archives Complete    : ");
        sb.append(getNumArchivesComplete());
        sb.append(newLine);
        sb.append("Number of Hashes Complete      : ");
        sb.append(getNumHashesComplete());
        sb.append(newLine);
        sb.append("Total Number of Files          : ");
        sb.append(getNumFiles());
        sb.append(newLine);
        sb.append("Total Number of Files Complete : ");
        sb.append(getNumFilesComplete());
        sb.append(newLine);
        sb.append("Total Size                     : ");
        sb.append(getTotalSize());
        sb.append("  (Uncompressed)");
        sb.append(newLine);
        sb.append("Total Size Complete            : ");
        sb.append(getSizeComplete());
        sb.append("  (Compressed)");
        sb.append(newLine);
        sb.append("Elapsed Time                   : ");
        sb.append(getElapsedTime());
        sb.append(" ms ");
        sb.append(newLine);
        if ((archives != null) && (archives.size() > 0)) {
            sb.append("Output Archives                : ");
            sb.append(newLine);
            for (Archive bundle : archives) {
                sb.append(bundle.toString());
            }
        }
        sb.append(newLine);
        sb.append("----------------------------------------");
        sb.append("----------------------------------------");
        sb.append(newLine);
        return sb.toString();
    }
   
    /**
     * Internal static class implementing the Builder creation pattern for 
     * new JobTrackerMessageBuilder objects.  
     * 
     * @author L. Craig Carpenter
     */
    @JsonPOJOBuilder(withPrefix = "")
    public static class JobTrackerMessageBuilder implements BundlerConstantsI {
        
        
    }
}
